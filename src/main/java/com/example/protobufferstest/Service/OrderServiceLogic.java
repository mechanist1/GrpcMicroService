package com.example.protobufferstest.Service;

import com.example.protobufferstest.DAL.InventoriesRepo;
import com.example.protobufferstest.DAL.OrdersRepo;
import com.example.protobufferstest.Models.Inventory;
import com.example.protobufferstest.Models.Order;
import com.example.protobufferstest.GRPCautogenerated.com.example.grpc.generated.*;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class OrderServiceLogic {
    private final OrdersRepo orderRepository;
    private final InventoriesRepo inventoriesRepo;

    public OrderServiceLogic(OrdersRepo orderRepository, InventoriesRepo inventoriesRepo) {
        this.orderRepository = orderRepository;
        this.inventoriesRepo = inventoriesRepo;
    }

    public ResponseEntity<Page<Order>> getAllOrders(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Order> orderPage = orderRepository.findAll(pageable);

        return ResponseEntity.ok(orderPage);
    }

    public OrderResponse createOrder(GrpcOrder request) {
        Order order = new Order();
        order.setServiceProviderId(request.getServiceProviderId());
        order.setBookingId(request.getBookingId());
        order.setServiceId(request.getServiceId());
        order.setTotalAmount(request.getTotalAmount());

        orderRepository.save(order);

        return OrderResponse.newBuilder()
                .setMessage("Order created successfully!")
                .build();
    }

    public GrpcOrder getOrder(OrderRequest request) {
        Optional<Order> optionalOrder = orderRepository.findById(request.getId());
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            return GrpcOrder.newBuilder()
                    .setId(order.getId())
                    .setBookingId(order.getBookingId())
                    .setServiceProviderId(order.getServiceProviderId())
                    .setServiceId(order.getServiceId())
                    .setTotalAmount(order.getTotalAmount())
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public OrderResponse updateOrder(GrpcOrder request) {
        Optional<Order> optionalOrder = orderRepository.findById(request.getId());
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setServiceProviderId(request.getServiceProviderId());
            order.setServiceId(request.getServiceId());
            order.setTotalAmount(request.getTotalAmount());

            orderRepository.save(order);

            return OrderResponse.newBuilder()
                    .setMessage("Order updated successfully!")
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public OrderResponse deleteOrder(OrderRequest request) {
        if (orderRepository.existsById(request.getId())) {
            orderRepository.deleteById(request.getId());
            return OrderResponse.newBuilder()
                    .setMessage("Order deleted successfully!")
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public InventoryResponse addInventory(GrpcInventory request) {
        Inventory inventory = new Inventory();
        inventory.setName(request.getName());
        inventory.setServiceProviderId(request.getServiceProviderId());
        inventory.setQuantity(request.getQuantity());

        inventoriesRepo.save(inventory);

        return InventoryResponse.newBuilder()
                .setMessage("Inventory created successfully!")
                .build();
    }

    public GrpcInventory getInventory(InventoryRequest request) {
        Optional<Inventory> optionalInventory = inventoriesRepo.findById(request.getId());
        if (optionalInventory.isPresent()) {
            Inventory inventory = optionalInventory.get();
            return GrpcInventory.newBuilder()
                    .setId(inventory.getId())
                    .setName(inventory.getName())
                    .setServiceProviderId(inventory.getServiceProviderId())
                    .setQuantity(inventory.getQuantity())
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public InventoryResponse updateInventory(GrpcInventory request) {
        Optional<Inventory> optionalInventory = inventoriesRepo.findById(request.getId());
        if (optionalInventory.isPresent()) {
            Inventory inventory = optionalInventory.get();
            inventory.setName(request.getName());
            inventory.setServiceProviderId(request.getServiceProviderId());
            inventory.setQuantity(request.getQuantity());

            inventoriesRepo.save(inventory);

            return InventoryResponse.newBuilder()
                    .setMessage("Inventory updated successfully!")
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public InventoryResponse deleteInventory(InventoryRequest request) {
        if (inventoriesRepo.existsById(request.getId())) {
            inventoriesRepo.deleteById(request.getId());
            return InventoryResponse.newBuilder()
                    .setMessage("Inventory deleted successfully!")
                    .build();
        } else {
            throw new StatusRuntimeException(Status.NOT_FOUND);
        }
    }

    public Inventory toInventory(GrpcInventory grpcInventory) {
        Inventory inventory = new Inventory();
        inventory.setId(grpcInventory.getId());
        inventory.setName(grpcInventory.getName());
        inventory.setServiceProviderId(grpcInventory.getServiceProviderId());
        inventory.setQuantity(grpcInventory.getQuantity());
        return inventory;
    }

    public GrpcInventory toGrpcInventory(Inventory inventory) {
        return GrpcInventory.newBuilder()
                .setId(inventory.getId())
                .setName(inventory.getName())
                .setServiceProviderId(inventory.getServiceProviderId())
                .setQuantity(inventory.getQuantity())
                .build();
    }

    private GrpcOrder toGrpcOrder(Order order) {
        return GrpcOrder.newBuilder()
                .setId(order.getId())
                .setBookingId(order.getBookingId())
                .setServiceProviderId(order.getServiceProviderId())
                .setServiceId(order.getServiceId())
                .setTotalAmount(order.getTotalAmount())
                .build();
    }

    public long getAllOrdersCount() {
        return orderRepository.count();
    }
}
