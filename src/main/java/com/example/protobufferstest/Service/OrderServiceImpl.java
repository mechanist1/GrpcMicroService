package com.example.protobufferstest.Service;

import com.example.protobufferstest.DAL.InventoriesRepo;
import com.example.protobufferstest.DAL.OrdersRepo;
import com.example.protobufferstest.GRPCautogenerated.com.example.grpc.generated.*;
import com.example.protobufferstest.Models.Inventory;
import com.example.protobufferstest.Models.Order;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@AllArgsConstructor
public class OrderServiceImpl extends OrderServiceGrpc.OrderServiceImplBase {
    private final OrdersRepo orderRepository;
    private final InventoriesRepo inventoriesRepo;

    @Override
    public void createOrder(Order request, StreamObserver<OrderResponse> responseObserver) {
        Order order = new Order();
        order.setServiceProviderId(request.getServiceProviderId());
        order.setServiceId(request.getServiceId());
        order.setTotalAmount(request.getTotalAmount());

        orderRepository.save(order);

        OrderResponse response = OrderResponse.newBuilder()
                .setMessage("Order created successfully!")
                .build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void getOrder(OrderRequest request, StreamObserver<GrpcOrder> responseObserver) {
        Optional<Order> optionalOrder = orderRepository.findById(request.getId());
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();

            // Create a GrpcOrder object to send as the response
            GrpcOrder response = GrpcOrder.newBuilder()
                    .setId(order.getId())
                    .setBookingId(order.getBookingId())
                    .setServiceProviderId(order.getServiceProviderId())
                    .setServiceId(order.getServiceId())
                    .setTotalAmount(order.getTotalAmount())
                    .build();

            responseObserver.onNext(response);
        } else {
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();
    }


    @Override
    public void updateOrder(Order request, StreamObserver<OrderResponse> responseObserver) {
        Optional<Order> optionalOrder = orderRepository.findById(request.getId());
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setServiceProviderId(request.getServiceProviderId());
            order.setServiceId(request.getServiceId());
            order.setTotalAmount(request.getTotalAmount());

            orderRepository.save(order);

            OrderResponse response = OrderResponse.newBuilder()
                    .setMessage("Order updated successfully!")
                    .build();

            responseObserver.onNext(response);
        } else {
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();
    }

    @Override
    public void deleteOrder(OrderRequest request, StreamObserver<OrderResponse> responseObserver) {
        if (orderRepository.existsById(request.getId())) {
            orderRepository.deleteById(request.getId());

            OrderResponse response = OrderResponse.newBuilder()
                    .setMessage("Order deleted successfully!")
                    .build();

            responseObserver.onNext(response);
        } else {
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();
    }

    @Override
    public void addInventory(GrpcInventory request, StreamObserver<InventoryResponse> responseObserver) {
        Inventory inventory = new Inventory();
        inventory.setName(request.getName());
        inventory.setServiceProviderId(request.getServiceProviderId());
        inventory.setQuantity(request.getQuantity());

        inventoriesRepo.save(inventory);

        InventoryResponse response = InventoryResponse.newBuilder()
                .setMessage("Inventory created successfully!")
                .build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();

    }

    @Override
    public void getInventory(InventoryRequest request, StreamObserver<GrpcInventory> responseObserver) {
        Optional<Inventory> optionalInventory = inventoriesRepo.findById(request.getId());
        if(optionalInventory.isPresent()) {
            GrpcInventory grpcInventory = GrpcInventory.newBuilder().setId(optionalInventory.get().getId())
                    .setQuantity(optionalInventory.get().getQuantity())
                    .setServiceProviderId(optionalInventory.get().getServiceProviderId())
                    .setName(optionalInventory.get().getName())
                    .build();
            responseObserver.onNext(grpcInventory);
        }
        else{
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();
    }

    @Override
    public void deleteInventory(InventoryRequest request, StreamObserver<InventoryResponse> responseObserver) {
        if (inventoriesRepo.existsById(request.getId())) {
            inventoriesRepo.deleteById(request.getId());

            InventoryResponse response = InventoryResponse.newBuilder()
                    .setMessage("Inventory deleted successfully!")
                    .build();

            responseObserver.onNext(response);
        } else {
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();
        }



    @Override
    public void updateInventory(GrpcInventory request, StreamObserver<InventoryResponse> responseObserver) {
        Optional<Inventory> optionalInventory = inventoriesRepo.findById(request.getId());
        if (optionalInventory.isPresent()) {
            Inventory inventory = optionalInventory.get();
            inventory.setServiceProviderId(request.getServiceProviderId());
            inventory.setName(request.getName());
            inventory.setQuantity(request.getQuantity());

            inventoriesRepo.save(inventory);

            InventoryResponse response = InventoryResponse.newBuilder()
                    .setMessage("Inventory updated successfully!")
                    .build();

            responseObserver.onNext(response);
        } else {
            responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND));
        }
        responseObserver.onCompleted();

    }
}
